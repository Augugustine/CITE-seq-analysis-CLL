---
title: "Pre-processing"
params: 
  patient: "P1"
  resolution: 0.1
  mito_gene_percent: 10
  directory: "/home/a.blanc-boekholt/Documents/Singlecell-R"
  file: "cleanedCellBender_filtered.h5"
format: html
editor: visual
---

Steps of this pre-processing using CellBender, Seurat and DoubletFinder (all days merged)

-   Downloading the data and creating one Seurat object per day. Using filtered data without empty drops and remove technical artifacts from CellBender

-   Merging all days into one Seurat object.

-   Removing non-coding genes using **Ensembl** gene annotations (via a reusable custom function).

-   Detecting doublets (Singlet or Doublet) using **DoubletFinder** on each day separately, then adding this metadata to the merged object and removing doublets (also done via a reusable function).

-   Quality control based on the number of detected features and percentage of mitochondrial genes (thresholds: max 10% mitochondrial genes, between 100 and 6000 features) using **Seurat**.

-   Selecting the top 2000 variable genes, normalization, and scaling (**Seurat**).

-   Visualizations: PCA, Heatmap, and UMAP (resolution 0.1)

## Data and libraries initialization

Libraries required

```{r}
#| message: false
library(SeuratObject)
library(sp)
library(Seurat)
library(hdf5r)
library(dplyr)
library(patchwork)
#library(scDblFinder)
library(DoubletFinder)
#library(SingleCellExperiment)
library(tibble)
library(biomaRt)
library(ggplot2)
library(scCustomize)
source("functions.R")
```

Download the data and Seurat Object creation

```{r}
#| include: false
seurat <- load_data_cellbender(params$patient, c(1,4,8,11,14), params$directory, params$file)
list2env(seurat, envir = .GlobalEnv)
```

Add an identity with the time point

```{r}
CLL_D1_filtered$timepoint <- "D1"
CLL_D4_filtered$timepoint <- "D4"
CLL_D8_filtered$timepoint <- "D8"
CLL_D11_filtered$timepoint <- "D11"
CLL_D14_filtered$timepoint <- "D14"
```

Merge all the data filtered, in order to have one SeuratObject with all the time point for one patient (and the total cells and genes number).

```{r}
CLL_merged <- merge(CLL_D1_filtered, y = list(CLL_D4_filtered, CLL_D8_filtered,
                                                    CLL_D11_filtered, CLL_D14_filtered),
                       add.cell.ids = c("D1", "D4", "D8", "D11", "D14"), project = "TimeCourse")

CLL_merged[["RNA"]] <- JoinLayers(CLL_merged[["RNA"]])
```

Total number of cells at the beginning.

```{r}
ncol(CLL_merged)
```

## Non coding genes removal

Features number before non-coding genes removal

```{r}
nrow(CLL_merged)
```

The non-coding genes removal is based on the database Ensembl in order to select the genes coding for proteins. The function used is explain on the file functions.R

This function accepts a Seurat object at any stage (pre- or post-processing) and returns a version of the object with all non-coding genes filtered out.

```{r}
#| message: false
#| warning: false
CLL_merged <- removal_noncoding_gene(CLL_merged)
all.equal(colnames(CLL_merged[["RNA"]]), colnames(CLL_merged))
```

Features number after non-coding genes removal

```{r}
nrow(CLL_merged)
```

## Doublet removal

Number of cell before doublet removal

```{r}
ncol(CLL_merged)
```

The tool used is DoubletFinder (McGinnis, C. S., Murrow, L. M., & Gartner, Z. J., 2019), and it is important to run it on each sample individually rather than on aggregated data. The input for this step is a Seurat object corresponding to one sample (i.e., one patient at one time point). In this case, we use the custom function `complete_DoubletFinder` defined in the `functions.R` file. This function performs all necessary preprocessing steps prior to running DoubletFinder. The output is a new Seurat object that includes an additional metadata column indicating whether each cell is classified as a singlet or a doublet. For each day, the cell IDs and their corresponding classifications are extracted and then merged across all days.

```{r}
#| message: false
#| warning: false
#| include: false

days <- c("D1","D4","D8","D11", "D14")
results_list <- list()

for (day in days) {
  obj_name <- paste0("CLL_", day, "_filtered")
  obj <- get(obj_name)
  obj <- complete_DoubletFinder(obj)
  assign(obj_name, obj) 
  
  # Metadata extraction
  res <- obj@meta.data["doublet_finder"]
  
  # New cells name with _D
  res$cell_id <- paste0(day, "_", rownames(res))
  rownames(res) <- res$cell_id
  res$cell_id <- NULL
  
  results_list[[day]] <- res
}

# Fusion
results_multiplet <- do.call(dplyr::bind_rows, results_list)

```

Doublet/Singlet class addition in the Seurat Object metadata and removal doublet

```{r}
CLL_merged <- AddMetaData(CLL_merged, results_multiplet)
CLL_multiplet <- CLL_merged
```

Percentage calculation

```{r}
#| include: false
table_classes <- table(CLL_merged$doublet_finder)
percentages <- prop.table(table_classes) * 100

CLL_merged@meta.data %>%
  group_by(timepoint, doublet_finder) %>%
  summarise(n = n()) %>%
  mutate(percent = n / sum(n) * 100) -> timepoint_percent
```

```{r}
print(percentages)
print(timepoint_percent)
```

```{r}
CLL_merged <- subset(CLL_merged, doublet_finder == 'Singlet')
```

Identify the doublets on the UMAP

```{r}
#| include: false
CLL_multiplet <- run_umap(CLL_multiplet)

CLL_multiplet$Doublet_Status <- ifelse(CLL_multiplet$doublet_finder == "Doublet", "Doublet", "Other")
```

```{r}
doublet<-DimPlot(CLL_multiplet, group.by = "Doublet_Status", cols = c("Other" = "grey80", "Doublet" = "red")) + ggtitle(paste("Doublets position for", params$patient, "with \nDoubletFinder (McGinnis, C. S. and al, 2019)"))
doublet
ggsave(paste0("doublet_", params$patient, ".jpeg"), doublet)
```

Cell number after doublets removal

```{r}
ncol(CLL_merged)
```

## QC and filtering

This step in done on the data days merged (same threshold for the 5 time points). Damaged cells removal (mitochondrial gene percentage), related to the cell quality

Mitochondrial gene percentage calculation

```{r}
CLL_merged[["percent.mt"]] <- PercentageFeatureSet(CLL_merged, pattern = "^MT-")
```

Observe the distribution on violin plot, in order to adapt the threshold

```{r}
#| warning: false
vplot1 <-VlnPlot(CLL_merged, features = c("nFeature_RNA"))
vplot2 <-VlnPlot(CLL_merged, features = c("nCount_RNA"))
vplot3 <-VlnPlot(CLL_merged, features = c("percent.mt"))
(vplot1 / vplot2 / vplot3) + plot_annotation(
    title =paste("Violon Plots (nFeature, nCount, mitonchondrial genes percentage) \nfor", params$patient, ", before the QC and filtering"))
```

Visualize the position of cells that failed QC on the UMAP

```{r}
#| include: false
CLL_merged$qc_pass <- with(CLL_merged@meta.data,
                           nFeature_RNA > 100 &
                           nFeature_RNA < 6000 &
                           percent.mt < params$mito_gene_percent)
CLL_qc <-CLL_merged
CLL_qc <- run_umap(CLL_qc)
```

```{r}
qc<-DimPlot(CLL_qc, group.by = "qc_pass", cols = c("TRUE" = "grey80", "FALSE" = "red")) + ggtitle(paste("QC status of cells (red = failed) for", params$patient,"based on \npredefined thresholds for nFeature and \nmitochondrial gene percentage (Seurat pipeline and CellBender)"))
qc
ggsave(paste0("cellbender_qc_", params$patient, ".jpeg"), qc)
```

Filtering

```{r}
CLL_merged<-subset(CLL_merged, subset = qc_pass == TRUE)
```

Cell and features number after filtering

```{r}
ncol(CLL_merged)
nrow(CLL_merged)
```

Violin plot after filtering

```{r}
#| warning: false
vplot4 <- VlnPlot(CLL_merged, features = c("nFeature_RNA")) 
vplot5 <- VlnPlot(CLL_merged, features = c("nCount_RNA")) 
vplot6 <- VlnPlot(CLL_merged, features = c("percent.mt"))
(vplot4 / vplot5 / vplot6) + plot_annotation(
    title =paste("Violon Plots (nFeature, nCount, mitonchondrial genes percentage) \nfor", params$patient, ", after the QC and filtering"))
```

## Normalization, scaling and most variable features

There are two ways to perform this step. One option is to use SCTransform, which combines normalization, scaling, and the selection of highly variable features in a single function. The normalization is based on a negative binomial regression model that accounts for technical variability. Alternatively, we can perform each step separately: First, normalize the data using the LogNormalize method, then apply scaling, and finally, identify the most variable features. With LogNormalize, the feature counts for each cell are divided by the total counts for that cell, multiplied by a scaling factor.

-   With SCTransform

```{r}
#| include: false
CLL_merged_sctransform <- CLL_merged
CLL_merged_sctransform <- SCTransform(CLL_merged_sctransform)
```

-   With LogNormalize

Normalization

```{r}
#| include: false
CLL_merged<-NormalizeData(CLL_merged)
```

Variable features. Only genes with variability are kept.

```{r}
#| warning: false
CLL_merged<-FindVariableFeatures(CLL_merged,selection.method = "vst", 
                                    nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(CLL_merged), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(CLL_merged)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2 + ggtitle(paste("Top variable features with the 10 most \nhighly variable genes highlighted, \nfor", params$patient))
```

Scaling

```{r}
#| warning: false
all.genes <- rownames(CLL_merged)
CLL_merged <- ScaleData(CLL_merged, features = all.genes)
```

# Exploring

First step of visualization is to run a PCA.

```{r}
#| warning: false
CLL_merged <- RunPCA(CLL_merged, features = VariableFeatures(object = CLL_merged))
CLL_merged_sctransform <- RunPCA(CLL_merged_sctransform, features = VariableFeatures(object = CLL_merged_sctransform))
```

Ranking of principle components based on the percentage of variance explained by each one, in order to choose how many components for the representation

```{r}
#| warning: false
ElbowPlot(CLL_merged) + ggtitle("with LogNormalize")
ElbowPlot(CLL_merged_sctransform) + ggtitle("with SCTransform")
```

With those plots, the correlation between genes and components is shown, the PCA in the two first components and the heatmap in PC1.

```{r}
VizDimLoadings(CLL_merged_sctransform, dims = 1:2, reduction = "pca")
DimPlot(CLL_merged_sctransform, reduction = "pca") + NoLegend() + ggtitle("PCA with SCTransform")
DimHeatmap(CLL_merged_sctransform, dims = 1, cells = 500, balanced = TRUE)
```

```{r}
VizDimLoadings(CLL_merged, dims = 1:2, reduction = "pca")
DimPlot(CLL_merged, reduction = "pca") + NoLegend() + ggtitle("PCA with LogNormalize")
DimHeatmap(CLL_merged, dims = 1, cells = 500, balanced = TRUE)
```

## Clustering

Cells were clustered based on the first ten principal components. The `FindClusters` function requires a `resolution` parameter, which controls the clustering granularity, the number of clusters obtained depends directly on this value. That's why different resolutions can be tested, in scripts parameters, in order to identify the most appropriate one.

Kmeans method and Elbow plot.

```{r}
pca_data <- Embeddings(CLL_merged, reduction = "pca")[, 1:10]
wss <- sapply(1:15, function(k){
  kmeans(pca_data, centers = k, nstart = 10)$tot.withinss
})
kmeanplot <- plot(1:15, wss, type = "b", pch = 19, frame = FALSE,
     xlab = "Number of clusters K",
     ylab = "Total within-clusters sum of squares",
     main = "Elbow Method for Optimal K (K-means)")
kmeanplot
ggsave(paste0("kmean_", params$patient, ".jpeg"), kmeanplot)
```

```{r}
#| message: false
#| warning: false
#| include: false
CLL_merged_sctransform <- FindNeighbors(CLL_merged_sctransform, dims = 1:10)
CLL_merged_sctransform <- FindClusters(CLL_merged_sctransform, resolution = params$resolution)
```

```{r}
#| message: false
#| warning: false
#| include: false
CLL_merged <- FindNeighbors(CLL_merged, dims = 1:10)
CLL_merged <- FindClusters(CLL_merged, resolution = params$resolution)
```

## UMAP

Run the UMAP (visualization) on the resolution chosen below.

```{r}
#| warning: false
CLL_merged_sctransform <- RunUMAP(CLL_merged_sctransform, dims = 1:10)
DimPlot(CLL_merged_sctransform, reduction = "umap") + ggtitle(paste("UMAP (SCTransform-normalized, \npost-Seurat pipeline and CellBender),", params$patient))
plotumap<-DimPlot(CLL_merged_sctransform, reduction = "umap")
ggsave(paste0("cellbender_umap_sct_", params$patient, ".jpeg"), plotumap)
```

UMAP by timepoint

```{r}
CLL_merged_sctransform$timepoint <- factor(
  CLL_merged_sctransform$timepoint,
  levels = c("D1", "D4", "D8", "D11", "D14")
)

time<-DimPlot(CLL_merged_sctransform, reduction = "umap", group.by = "seurat_clusters", split.by = "timepoint") +
  ggtitle(paste("UMAP by timepoint (SCTransform-normalized, \npost-Seurat pipeline and CellBender),", params$patient)) +
  theme(plot.title = element_text(hjust = 0.5))
time
ggsave(paste0("cellbender_umap_timepoint_sct_", params$patient, ".jpeg"), time)
```

```{r}
#| warning: false
CLL_merged <- RunUMAP(CLL_merged, dims = 1:10)
DimPlot(CLL_merged, reduction = "umap") + ggtitle("UMAP (normalized by LogNormalize), \npost-Seurat pipeline and CellBender,")
plotumap<-DimPlot(CLL_merged, reduction = "umap")
ggsave(paste0("cellbender_umap_log_", params$patient, ".jpeg"), plotumap)
```

```{r}
CLL_merged$timepoint <- factor(
  CLL_merged$timepoint,
  levels = c("D1", "D4", "D8", "D11", "D14")
)

time2<-DimPlot(CLL_merged, reduction = "umap", group.by = "seurat_clusters", split.by = "timepoint") +
  ggtitle(paste("UMAP by timepoint (LogNormalize-normalized, post-Seurat pipeline and CellBender),", params$patient)) +
  theme(plot.title = element_text(hjust = 0.5))
time2
ggsave(paste0("cellbender_umap_timepoint_log_", params$patient, ".jpeg"), time2)
```

## t-SNE

```{r}
CLL_merged_sctransform <- RunTSNE(CLL_merged_sctransform, reduction.use = "pca", dims.use = 1:10)
tsne<-TSNEPlot(CLL_merged_sctransform) + ggtitle(paste("t-SNE (normalized by SCTransform, \npost-Seurat pipeline and CellBender),", params$patient))
tsne
ggsave(paste0("cellbender_tsne_sct_", params$patient, ".jpeg"), tsne)
```

```{r}
CLL_merged <- RunTSNE(CLL_merged, reduction.use = "pca", dims.use = 1:10)
tsne1<-TSNEPlot(CLL_merged) + ggtitle(paste("t-SNE (normalized by LogNormalize, \npost-Seurat pipeline and CellBender),", params$patient))
tsne1
ggsave(paste0("cellbender_tsne_log_", params$patient, ".jpeg"), tsne1)
```

## Bonsai

Bonsai is a data representation tool that can be applied to single-cell datasets. It reconstructs a tree that best captures the structure present in high-dimensional data (Daan Hugo de Groot, Sarah X. Morillo Leonardo, Mikhail Pachkov, Erik van Nimwegen, 2025).

In this analysis, we use the single-cell Bonsai pipeline available at <https://bonsai.unibas.ch/bonsai/>. To use it, we first extract the gene expression count matrix from the Seurat object and save it in a tsv format. This matrix is then submitted through the web interface, and the results are sent via email once the analysis is complete.

Export the count matrix to a tsv file from a Seurat object

```{r}
counts <- GetAssayData(object = CLL_merged_sctransform, assay = "RNA", slot = "counts")
counts <- as.matrix(counts)
namefile=paste0("CLL_", params$patient, "_cellbender_SCTransform.tsv")
write.table(counts, file = namefile, sep = "\t", quote = FALSE, col.names = NA)
```

```{r}
counts <- GetAssayData(object = CLL_merged, assay = "RNA", slot = "counts")
counts <- as.matrix(counts)
namefile=paste0("CLL_", params$patient, "_cellbender_logNormalize.tsv")
write.table(counts, file = namefile, sep = "\t", quote = FALSE, col.names = NA)
```

## wnnUMAP (ADT+RNA)

Visualization with wnnUMAP on data SCTransform

```{r}
#| message: false
#| warning: false
CLL_merged_sctransform <-run_adt_umap(CLL_merged_sctransform)
CLL_merged_sctransform <- run_wnnumap(CLL_merged_sctransform, params$resolution, "SCT")
plotwnn <- DimPlot(CLL_merged_sctransform, reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 2.5) + 
  NoLegend() + ggtitle(paste("wnnUMAP on RNA SCTranform normalization \nand post-Seurat pipeline and CellBender,", params$patient))
plotwnn
ggsave(paste0("cellbender_wnnumpa_sct_", params$patient, ".jpeg"), plotwnn)
DefaultAssay(CLL_merged_sctransform) <- 'RNA'
```

Visualization with wnnUMAP on data LogNormalize

```{r}
#| message: false
#| warning: false
CLL_merged <-run_adt_umap(CLL_merged)
CLL_merged <- run_wnnumap(CLL_merged, params$resolution, "RNA")
plotwnn <- DimPlot(CLL_merged, reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 2.5) + 
  NoLegend() + ggtitle(paste("wnnUMAP with RNA LogNormalize \nand post-Seurat pipeline and CellBender,", params$patient))
plotwnn
ggsave(paste0("cellbender_wnnumpa_log_", params$patient, ".jpeg"), plotwnn)
DefaultAssay(CLL_merged) <- 'RNA'
```

## Save the object after the pre-processing

```{r}
namepath=paste0("./CLL_", params$patient, "_cellbender.rds")
saveRDS(CLL_merged, file = namepath)
```
