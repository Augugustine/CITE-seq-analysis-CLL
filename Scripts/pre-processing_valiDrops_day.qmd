---
title: "Pre-processing valiDrops"
params: 
  patient: "P1"
  resolution: 0.2
  directory: "/home/a.blanc-boekholt/Documents/Singlecell-R"
  file: "valiDrops.rds"
editor: visual
---

## Steps of this pre-processing, valiDrops, Seurat and DoubletFinder

-   Downloading the data filtered and annotated by valiDrops and DoubletFinder in the `run_valiDrops_day.qmd` script, processed separately for each day. Merged the data.

-   Selecting the top 2000 variable genes, normalization, and scaling using Seurat

-   Visualizations: PCA, Heatmap, and UMAP, t-SNE, wnnUMAP

## Data and libraries initialization

```{r}
#| message: false
library(SeuratObject)
library(sp)
library(Seurat)
library(hdf5r)
library(dplyr)
library(patchwork)
library(DoubletFinder)
library(tibble)
library(ggplot2)
library(SummarizedExperiment)
source("functions.R")
```

```{r}
#| include: false
days <- c(1, 4, 8, 11, 14)
for (day in days) {
  paths <- file.path(base_dir, params$patient, paste0("run_count_J", day), "outs", params$file)
  data_list <- lapply(paths, readRDS)
  names(data_list) <- paste0("CLL", "_D", day)
}
```

Add an identity with the time point

```{r}
CLL_D1$timepoint <- "D1"
CLL_D4$timepoint <- "D4"
CLL_D8$timepoint <- "D8"
CLL_D11$timepoint <- "D11"
CLL_D14$timepoint <- "D14"
```

Merge all the data filtered, in order to have one SeuratObject with all the time point for one patient (and the total cells and genes number).

```{r}
CLL_merged <- merge(CLL_D1, y = list(CLL_D4, CLL_D8, CLL_D11, CLL_D14),
                       add.cell.ids = c("D1", "D4", "D8", "D11", "D14"), project = "TimeCourse")

CLL_merged[["RNA"]] <- JoinLayers(CLL_merged[["RNA"]])
```

Total number of cells at the beginning.

```{r}
ncol(CLL_merged)
```

Subset the doublets

```{r}
CLL_merged <- subset(CLL_merged, doublet_finder == 'Singlet')
```

Observe the cells tagged dead by valiDrops

```{r}
CLL_qc <-CLL_merged
CLL_qc <- run_umap(CLL_qc, params$resolution)
```

```{r}
title=paste("QC status of dead cells (red = dead) using valiDrops tool (filtering the empty barcodes and dead cells),", params$patient)
plot1<-DimPlot(CLL_qc, group.by = "label", cols = c("TRUE" = "grey50", "FALSE" = "red")) + ggtitle(str_wrap(title, width = 50)) + theme(plot.title = element_text(size = 10, hjust = 0.5))
plot1
ggsave(paste0("valiDrops_qc_", params$patient, ".jpeg"), plot1)
```

```{r}
CLL_merged <- subset(CLL_merged, subset = label == "live")
```

## Normalization, scaling and most variable features

Normalization

```{r}
#| include: false
CLL_merged<-NormalizeData(CLL_merged)
```

Variable features. Only genes with variability are kept.

```{r}
#| warning: false
CLL_merged<-FindVariableFeatures(CLL_merged,selection.method = "vst", 
                                    nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(CLL_merged), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(CLL_merged)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
```

Scaling

```{r}
#| warning: false
all.genes <- rownames(CLL_merged)
CLL_merged <- ScaleData(CLL_merged, features = all.genes)
```

# Exploring

First step of visualization is to run a PCA.

```{r}
#| warning: false
CLL_merged <- RunPCA(CLL_merged, features = VariableFeatures(object = CLL_merged))
```

Ranking of principle components based on the percentage of variance explained by each one, in order to choose how many components for the representation

```{r}
#| warning: false
ElbowPlot(CLL_merged)
```

With those plots, the correlation between genes and components is shown, the PCA in the two first components and the heatmap in PC1.

```{r}
VizDimLoadings(CLL_merged, dims = 1:2, reduction = "pca")
DimPlot(CLL_merged, reduction = "pca") + NoLegend()
DimHeatmap(CLL_merged, dims = 1, cells = 500, balanced = TRUE)
```

## Clustering

Cells were clustered based on the first ten principal components. The `FindClusters` function requires a `resolution` parameter, which controls the clustering granularity, the number of clusters obtained depends directly on this value. That's why four different resolutions (0.05, 0.1, 0.2, 0.5) were tested, in order to identify the most appropriate one.

```{r}
#| message: false
#| warning: false
CLL_merged <- FindNeighbors(CLL_merged, dims = 1:10)
CLL_merged <- FindClusters(CLL_merged, resolution = params$resolution)
```

## t-SNE

```{r}
CLL_merged <- RunTSNE(CLL_merged, reduction.use = "pca", dims.use = 1:10)
title=paste("t-SNE after QC and filtering by valiDrops,", params$patient)
plot1<-TSNEPlot(CLL_merged) + ggtitle(str_wrap(title, width = 50)) + theme(plot.title = element_text(size = 10, hjust = 0.5))
plot1
ggsave(paste0("valiDrops_tsne_", params$patient, ".jpeg"), plot1)
```

## Bonsai

Bonsai is a data representation tool that can be applied to single-cell datasets. It reconstructs a tree that best captures the structure present in high-dimensional data (Daan Hugo de Groot, Sarah X. Morillo Leonardo, Mikhail Pachkov, Erik van Nimwegen, 2025).

In this analysis, we use the single-cell Bonsai pipeline available at <https://bonsai.unibas.ch/bonsai/>. To use it, we first extract the gene expression count matrix from the Seurat object and save it in a tsv format. This matrix is then submitted through the web interface, and the results are sent via email once the analysis is complete.

Export the count matrix to a tsv file from a Seurat object

```{r}
counts <- GetAssayData(object = CLL_merged, assay = "RNA", slot = "counts")
counts <- as.matrix(counts)
namefile=paste0("CLL_", params$patient, "_valiDrops.tsv")
write.table(counts, file = namefile, sep = "\t", quote = FALSE, valiDrops and DoubletFindercol.names = NA)
```

## wnnUMAP (ADT+RNA)

```{r}
#| message: false
#| warning: false
CLL_merged <-run_adt_umap(CLL_merged)
CLL_merged <- run_wnnumap(CLL_merged, params$resolution, "RNA")
title=paste("wnnUMAP after QC and filtering by valiDrops,", params$patient)
plotwnn <- DimPlot(CLL_merged, reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 2.5) + NoLegend() + ggtitle(str_wrap(title, width = 50)) + theme(plot.title = element_text(size = 10, hjust = 0.5))
plotwnn
ggsave(paste0("valiDrops_wnnumap_", params$patient, ".jpeg"), plotwnn)
DefaultAssay(CLL_merged) <- 'RNA'
```

## UMAP

Run the UMAP on the resolution chosen below.

```{r}
#| warning: false
CLL_merged <- RunUMAP(CLL_merged, dims = 1:10)
title=paste("UMAP after QC and filtering by valiDrops,", params$patient)
DimPlot(CLL_merged, reduction = "umap")
plotumap<-DimPlot(CLL_merged, reduction = "umap") + ggtitle(str_wrap(title, width = 50)) + theme(plot.title = element_text(size = 10, hjust = 0.5))
ggsave(paste0("valiDrops_umap_", params$patient, ".jpeg"), plotumap)
```

## Save the object after the pre-processing

```{r}
namepath=paste0("./CLL_", params$patient, "_valiDrops.rds")
saveRDS(CLL_merged, file = namepath)
```
