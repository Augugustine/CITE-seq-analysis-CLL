---
title: "Pre-processing QC separately for each day"
params: 
  patient: "P2"
  resolution: 0.1
  mito_gene_percent: 10
  directory: "/home/a.blanc-boekholt/Documents/Singlecell-R"
  file: "filtered_feature_bc_matrix.h5"
format: html
editor: visual
---

## Steps of this pre-processing Seurat and DoubletFinder were performed separately for each day

-   Downloading the data and creating one Seurat object per day. Using filtered data without empty drops and remove technical artifacts (from CellRanger 10X Genomics)

-   Removing non-coding genes using **Ensembl** gene annotations (via a reusable custom function).

-   Detecting doublets (Singlet or Doublet) using **DoubletFinder** on each day separately.

-   Quality control based on the number of detected features and percentage of mitochondrial genes (thresholds: max 10% mitochondrial genes, between 100 and 6000 features) using **Seurat**.

-   Merging all days into one Seurat object.

-   Selecting the top 2000 variable genes, normalization, and scaling (**Seurat**).

-   Visualizations: PCA, Heatmap, and UMAP (resolution 0.1)

## Data and libraries initialization

Libraries required

```{r}
#| message: false
library(SeuratObject)
library(sp)
library(Seurat)
library(hdf5r)
library(dplyr)
library(patchwork)
#library(scDblFinder)
library(DoubletFinder)
#library(SingleCellExperiment)
library(tibble)
library(biomaRt)
library(ggplot2)
source("functions.R")
```

Download the data and Seurat Object creation

```{r}
#| include: false
seurat <- load_data_10XG(params$patient, c(1,4,8,11,14), params$directory, params$file)
list2env(seurat, envir = .GlobalEnv)
```

Total number of cells at the beginning.

```{r}
names=names(seurat)
sapply(mget(names), ncol)
```

## Non coding genes removal

Features number before non-coding genes removal

```{r}
sapply(mget(names), nrow)
```

The non-coding genes removal is based on the database Ensembl in order to select the genes coding for proteins. The function used is explain on the file functions.R

This function accepts a Seurat object at any stage (pre- or post-processing) and returns a version of the object with all non-coding genes filtered out.

```{r}
#| warning: false
seurat <- sapply(mget(names), removal_noncoding_gene)
list2env(seurat, envir = .GlobalEnv)
```

Features number after non-coding genes removal

```{r}
sapply(mget(names), nrow)
```

## Doublet removal

Number of cell before doublet removal

```{r}
sapply(mget(names), ncol)
```

The tool used is DoubletFinder, and it is important to run it on each sample individually rather than on aggregated data. The input for this step is a Seurat object corresponding to one sample (i.e., one patient at one time point). In this case, we use the custom function `complete_DoubletFinder` defined in the `functions.R` file. This function performs all necessary preprocessing steps prior to running DoubletFinder. The output is a new seurat object with a new column in the metadata which indicates whether the cell is classified as a singlet or doublet.

```{r}
#| message: false
#| warning: false
#| include: false
seurat <- lapply(mget(names), complete_DoubletFinder)
seurat <- lapply(seurat, function(obj) {
  subset(obj, subset = doublet_finder == "Singlet")
})
list2env(seurat, envir = .GlobalEnv)
```

Cell number after doublets removal

```{r}
sapply(mget(names), ncol)
```

## QC and filtering

This step in done on the data days merged (same threshold for the 5 time points). Damaged cells removal (mitochondrial gene percentage), related to the cell quality

Mitochondrial gene percentage calculation

```{r}
for (obj_name in names) {
  seurat_obj <- get(obj_name)
  seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
  assign(obj_name, seurat_obj)
}
```

Observe the distribution on violin plot, in order to adapt the threshold

```{r}
#| warning: false

for (obj_name in names) {
  seurat_obj <- get(obj_name)
  p1 <- VlnPlot(seurat_obj, features = "nFeature_RNA", pt.size = 0.1,  group.by = "orig.ident") + NoLegend()
  p2 <- VlnPlot(seurat_obj, features = "nCount_RNA", pt.size = 0.1, group.by = "orig.ident", y.max= 50000) + NoLegend()
  p3 <- VlnPlot(seurat_obj, features = "percent.mt", pt.size = 0.1, group.by = "orig.ident", y.max= 25) + NoLegend()
  print(p1 + p2 + p3 + plot_layout(ncol = 3))
}
```

Filtering

The threshold are chosen thanks to the plot below.

```{r}
CLL_D1_filtered<-subset(CLL_D1_filtered, subset= nFeature_RNA > 1000 
                      & nFeature_RNA < 6000 & percent.mt < params$mito_gene_percent)

CLL_D4_filtered<-subset(CLL_D4_filtered, subset= nFeature_RNA > 1000 
                      & nFeature_RNA < 5500 & percent.mt < params$mito_gene_percent)

CLL_D8_filtered<-subset(CLL_D8_filtered, subset= nFeature_RNA > 1000 
                      & nFeature_RNA < 6000 & percent.mt < params$mito_gene_percent)

CLL_D11_filtered<-subset(CLL_D11_filtered, subset= nFeature_RNA > 500 
                      & nFeature_RNA < 5000 & percent.mt < params$mito_gene_percent)

CLL_D14_filtered<-subset(CLL_D14_filtered, subset= nFeature_RNA > 500 
                      & nFeature_RNA < 6000 & percent.mt < params$mito_gene_percent)

```

Cell and features number after filtering

```{r}
sapply(mget(names), ncol)
sapply(mget(names), nrow)
```

## Merge the timepoint in one object

Add an identity with the time point

```{r}
CLL_D1_filtered$timepoint <- "D1"
CLL_D4_filtered$timepoint <- "D4"
CLL_D8_filtered$timepoint <- "D8"
CLL_D11_filtered$timepoint <- "D11"
CLL_D14_filtered$timepoint <- "D14"
```

Merge all the data filtered, in order to have one SeuratObject with all the time point for one patient (and the total cells and genes number).

```{r}
CLL_merged <- merge(CLL_D1_filtered, y = list(CLL_D4_filtered, CLL_D8_filtered,
                                                    CLL_D11_filtered, CLL_D14_filtered),
                       add.cell.ids = c("D1", "D4", "D8", "D11", "D14"), project = "TimeCourse")

CLL_merged[["RNA"]] <- JoinLayers(CLL_merged[["RNA"]])
```

## Normalization, scaling and most variable features

Normalization

```{r}
#| include: false
CLL_merged<-NormalizeData(CLL_merged)
```

Variable features. Only genes with variability are kept.

```{r}
#| warning: false
CLL_merged<-FindVariableFeatures(CLL_merged,selection.method = "vst", 
                                    nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(CLL_merged), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(CLL_merged)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
```

Scaling

```{r}
#| warning: false
all.genes <- rownames(CLL_merged)
CLL_merged <- ScaleData(CLL_merged, features = all.genes)
```

# Exploring

First step of visualization is to run a PCA.

```{r}
#| warning: false
CLL_merged <- RunPCA(CLL_merged, features = VariableFeatures(object = CLL_merged))
```

Ranking of principle components based on the percentage of variance explained by each one, in order to choose how many components for the representation

```{r}
#| warning: false
ElbowPlot(CLL_merged)
```

With those plots, the correlation between genes and components is shown, the PCA in the two first components and the heatmap in PC1.

```{r}
VizDimLoadings(CLL_merged, dims = 1:2, reduction = "pca")
DimPlot(CLL_merged, reduction = "pca") + NoLegend()
DimHeatmap(CLL_merged, dims = 1, cells = 500, balanced = TRUE)
```

## Clustering

Cells were clustered based on the first ten principal components. The `FindClusters` function requires a `resolution` parameter, which controls the clustering granularity, the number of clusters obtained depends directly on this value. That's why four different resolutions (0.05, 0.1, 0.2, 0.5) were tested, in order to identify the most appropriate one.

```{r}
#| message: false
#| warning: false
CLL_merged <- FindNeighbors(CLL_merged, dims = 1:10)
CLL_merged <- FindClusters(CLL_merged, resolution = params$resolution)
```

## UMAP

Run the UMAP (visualization) on the resolution chosen below.

```{r}
#| warning: false
CLL_merged <- RunUMAP(CLL_merged, dims = 1:10)
DimPlot(CLL_merged, reduction = "umap")
plotumap<-DimPlot(CLL_merged, reduction = "umap")
ggsave("umap.jpeg", plotumap)
```

Save the object after the pre-processing

```{r}
namepath=paste0("./CLL_", params$patient, "_merged.rds")
#saveRDS(CLL_merged, file = namepath)
```
