---
title: "pre-processing"
format: html
editor: visual
---

## Data and libraries initialization 

Libraries required

```{r}
#| message: false
library(SeuratObject)
library(sp)
library(Seurat)
library(hdf5r)
library(dplyr)
library(patchwork)
library(scDblFinder)
library(SingleCellExperiment)
```

Download the data

```{r}
#| message: false
CLL_p1_D1_filtered.data <- Read10X_h5("~/Documents/Singlecell-R/P1/run_count_J1/outs/filtered_feature_bc_matrix.h5")
CLL_p1_D4_filtered.data <- Read10X_h5("~/Documents/Singlecell-R/P1/run_count_J4/outs/filtered_feature_bc_matrix.h5")
CLL_p1_D8_filtered.data <- Read10X_h5("~/Documents/Singlecell-R/P1/run_count_J8/outs/filtered_feature_bc_matrix.h5")
CLL_p1_D11_filtered.data <- Read10X_h5("~/Documents/Singlecell-R/P1/run_count_J11/outs/filtered_feature_bc_matrix.h5")
CLL_p1_D14_filtered.data <- Read10X_h5("~/Documents/Singlecell-R/P1/run_count_J14/outs/filtered_feature_bc_matrix.h5")
```

Seurat Object creation

```{r}
CLL_p1_D1_filtered <- CreateSeuratObject(counts = CLL_p1_D1_filtered.data$`Gene Expression`, project = "P1_D1_filtered",min.cells = 2, min.features = 100)
CLL_p1_D4_filtered <- CreateSeuratObject(counts = CLL_p1_D4_filtered.data$`Gene Expression`, project = "P1_D4_filtered", min.cells = 2, min.features = 100)
CLL_p1_D8_filtered <- CreateSeuratObject(counts = CLL_p1_D8_filtered.data$`Gene Expression`, project = "P1_D8_filtered", min.cells = 2, min.features = 100)
CLL_p1_D11_filtered <- CreateSeuratObject(counts = CLL_p1_D11_filtered.data$`Gene Expression`, project = "P1_D11_filtered", min.cells = 2, min.features = 100)
CLL_p1_D14_filtered <- CreateSeuratObject(counts = CLL_p1_D14_filtered.data$`Gene Expression`, project = "P1_D14_filtered", min.cells = 2, min.features = 100)
```

Add an identity with the time point

```{r}
CLL_p1_D1_filtered$timepoint <- "D1"
CLL_p1_D4_filtered$timepoint <- "D4"
CLL_p1_D8_filtered$timepoint <- "D8"
CLL_p1_D11_filtered$timepoint <- "D11"
CLL_p1_D14_filtered$timepoint <- "D14"
```

Merge all the data filtered, in order to have one SeuratObject with all the time point for one patient (and the total cells and genes number).

```{r}
CLL_p1_merged <- merge(CLL_p1_D1_filtered, y = list(CLL_p1_D4_filtered, CLL_p1_D8_filtered, CLL_p1_D11_filtered, CLL_p1_D14_filtered), add.cell.ids = c("D1", "D4", "D8", "D11", "D14"), project = "TimeCourse")

CLL_p1_merged[["RNA"]] <- JoinLayers(CLL_p1_merged[["RNA"]])

ncol(CLL_p1_merged)
nrow(CLL_p1_merged)
```

## Doublet removal

The tool used is scDblFinder, is important to do this step on empty drops filtered data. The input data does not contain any empty drops, but hasn't been further filtered. The tool scDblFinder can be applied on aggregated data.

The input needs to be in the format SingleCellExperiment

```{r}
#| warning: false
input<-as.SingleCellExperiment(CLL_p1_merged)
sample_vector <- CLL_p1_merged$orig.ident
set.seed(1234)
input<-scDblFinder(input,sample=sample_vector)
table(input$scDblFinder.class)
```

Doublet/Singlet class addition in the Seurat Object metadata

```{r}
meta_scdblfinder <- input@colData@listData %>% as.data.frame() %>% 
  dplyr::select(starts_with('scDblFinder')) # 'scDblFinder.class')
rownames(meta_scdblfinder) <- input@colData@rownames
CLL_p1_merged <- AddMetaData(object = CLL_p1_merged, metadata = meta_scdblfinder %>% dplyr::select('scDblFinder.class'))
```

Removal doublet

```{r}
CLL_p1_merged <- subset(CLL_p1_merged, scDblFinder.class == 'singlet')
ncol(CLL_p1_merged)

```

## QC and filtering

This step in done on the data days merged (same threshold for the 5 time points). Damaged cells removal (mitochondrial gene percentage), related to the cell quality

Mitochondrial gene percentage calculation

```{r}
CLL_p1_merged[["percent.mt"]] <- PercentageFeatureSet(CLL_p1_merged, pattern = "^MT-")
```

Observe the distribution on violin plot, in order to adapt the threshold

```{r}
VlnPlot(CLL_p1_merged, features = c("nFeature_RNA"))
VlnPlot(CLL_p1_merged, features = c("nCount_RNA"))
VlnPlot(CLL_p1_merged, features = c("percent.mt"))
```

Filtering

```{r}
CLL_p1_merged<-subset(CLL_p1_merged, subset= nFeature_RNA > 100 & nFeature_RNA < 6000 & percent.mt < 10)

ncol(CLL_p1_merged)
nrow(CLL_p1_merged)
```

After filtering : 36601 genes and 14277 cells (Before filtering : 36601 genes and 22141 cells)

Violin plot after filtering

```{r}
VlnPlot(CLL_p1_merged, features = c("nFeature_RNA")) VlnPlot(CLL_p1_merged, features = c("nCount_RNA")) VlnPlot(CLL_p1_merged, features = c("percent.mt"))
```

## Normalization, scaling and most variable features

Normalization

```{r}
CLL_p1_merged<-NormalizeData(CLL_p1_merged)
```

Variable features

We keep only the genes with variability

```{r}
CLL_p1_merged<-FindVariableFeatures(CLL_p1_merged,selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(CLL_p1_merged), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(CLL_p1_merged)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
```

Scaling

```{r}
all.genes <- rownames(CLL_p1_merged)
CLL_p1_merged <- ScaleData(CLL_p1_merged, features = all.genes)
```

# 1st exploring

```{r}
CLL_p1_merged <- RunPCA(CLL_p1_merged, features = VariableFeatures(object = CLL_p1_merged))
```

Ranking of principle components based on the percentage of variance explained by each one, in order to choose how many components for the representation

```{r}
ElbowPlot(CLL_p1_merged)
```

```{r}
VizDimLoadings(CLL_p1_merged, dims = 1:2, reduction = "pca")
DimPlot(CLL_p1_merged, reduction = "pca") + NoLegend()
DimHeatmap(CLL_p1_merged, dims = 1, cells = 500, balanced = TRUE)
```
