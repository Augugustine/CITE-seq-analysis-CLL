---
title: "Pre-processing without doublet removal"
params: 
  patient: "P1"
  resolution: 0.1
  mito_gene_percent: 10
  directory: "/home/a.blanc-boekholt/Documents/Singlecell-R"
  file: "filtered_feature_bc_matrix.h5"
format: html
editor: visual
---

## Steps of this pre-processing Seurat without doublet removal (all days merged)

-   Downloading the data and creating one Seurat object per day. Using filtered data without empty drops and remove technical artifacts (from CellRanger 10X Genomics)

-   Merging all days into one Seurat object.

-   Removing non-coding genes using **Ensembl** gene annotations (via a reusable custom function).

-   Quality control based on the number of detected features and percentage of mitochondrial genes (thresholds: max 10% mitochondrial genes, between 100 and 6000 features) using **Seurat**.

-   Selecting the top 2000 variable genes, normalization, and scaling (**Seurat**).

-   Visualizations: PCA, Heatmap, and UMAP (resolution 0.1)

## Data and libraries initialization

Libraries required

```{r}
#| message: false
library(SeuratObject)
library(sp)
library(Seurat)
library(hdf5r)
library(dplyr)
library(patchwork)
#library(scDblFinder)
library(DoubletFinder)
#library(SingleCellExperiment)
library(tibble)
library(biomaRt)
library(ggplot2)
library(stringr)
source("functions.R")
```

Download the data and Seurat Object creation

```{r}
#| include: false
seurat <- load_data_10XG(params$patient, c(1,4,8,11,14), params$directory, params$file)
list2env(seurat, envir = .GlobalEnv)
```

Add an identity with the time point

```{r}
CLL_D1$timepoint <- "D1"
CLL_D4$timepoint <- "D4"
CLL_D8$timepoint <- "D8"
CLL_D11$timepoint <- "D11"
CLL_D14$timepoint <- "D14"
```

Merge all the data filtered, in order to have one SeuratObject with all the time point for one patient (and the total cells and genes number).

```{r}
CLL_merged <- merge(CLL_D1, y = list(CLL_D4, CLL_D8, CLL_D11, CLL_D14),
                       add.cell.ids = c("D1", "D4", "D8", "D11", "D14"), project = "TimeCourse")

CLL_merged[["RNA"]] <- JoinLayers(CLL_merged[["RNA"]])
```

Total number of cells at the beginning.

```{r}
ncol(CLL_merged)
```

## Non coding genes removal

Features number before non-coding genes removal

```{r}
nrow(CLL_merged)
```

The non-coding genes removal is based on the database Ensembl in order to select the genes coding for proteins. The function used is explain on the file functions.R

This function accepts a Seurat object at any stage (pre- or post-processing) and returns a version of the object with all non-coding genes filtered out.

```{r}
CLL_merged <- removal_noncoding_gene(CLL_merged)
```

Features number after non-coding genes removal

```{r}
nrow(CLL_merged)
```

## QC and filtering

This step in done on the data days merged (same threshold for the 5 time points). Damaged cells removal (mitochondrial gene percentage), related to the cell quality

Mitochondrial gene percentage calculation

```{r}
CLL_merged[["percent.mt"]] <- PercentageFeatureSet(CLL_merged, pattern = "^MT-")
```

Observe the distribution on violin plot, in order to adapt the threshold

```{r}
#| warning: false
vplot1 <-VlnPlot(CLL_merged, features = c("nFeature_RNA"))
vplot2 <-VlnPlot(CLL_merged, features = c("nCount_RNA"))
vplot3 <-VlnPlot(CLL_merged, features = c("percent.mt"))
(vplot1 / vplot2 / vplot3) + plot_annotation(
    title =paste("Violon Plots (nFeature, nCount, mitonchondrial genes percentage) \nfor", params$patient, ", before the QC and filtering"))
```

Visualize the position of cells that failed QC on the UMAP

```{r}
#| include: false
CLL_merged$qc_pass <- with(CLL_merged@meta.data,
                           nFeature_RNA > 100 &
                           nFeature_RNA < 6000 &
                           percent.mt < params$mito_gene_percent)
CLL_qc <-CLL_merged
CLL_qc <- run_umap(CLL_qc, params$resolution)
```

```{r}
title=paste("QC status of cells (red = failed) for", params$patient,"based on predefined thresholds for nFeature and mitochondrial gene percentage (Seurat pipeline) without the doublets removal")
qc<-DimPlot(CLL_qc, group.by = "qc_pass", cols = c("TRUE" = "grey50", "FALSE" = "red")) + ggtitle(str_wrap(title, width = 50)) + theme(plot.title = element_text(size = 10, hjust = 0.5))
qc
ggsave(paste0("withdoublets_qc_", params$patient, ".jpeg"), qc)
```

Filtering

```{r}
CLL_merged<-subset(CLL_merged, subset= nFeature_RNA > 100 
                      & nFeature_RNA < 6000 & percent.mt < params$mito_gene_percent)
```

Cell and features number after filtering

```{r}
ncol(CLL_merged)
nrow(CLL_merged)
```

Violin plot after filtering

```{r}
#| warning: false
vplot4 <- VlnPlot(CLL_merged, features = c("nFeature_RNA")) 
vplot5 <- VlnPlot(CLL_merged, features = c("nCount_RNA")) 
vplot6 <- VlnPlot(CLL_merged, features = c("percent.mt"))
(vplot4 / vplot5 / vplot6) + plot_annotation(
    title =paste("Violon Plots (nFeature, nCount, mitonchondrial genes percentage) \nfor", params$patient, ", after the QC and filtering"))
```

## Normalization, scaling and most variable features

Normalization

```{r}
#| include: false
CLL_merged<-NormalizeData(CLL_merged)
```

Variable features. Only genes with variability are kept.

```{r}
#| warning: false
CLL_merged<-FindVariableFeatures(CLL_merged,selection.method = "vst", 
                                    nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(CLL_merged), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(CLL_merged)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
```

Scaling

```{r}
#| warning: false
all.genes <- rownames(CLL_merged)
CLL_merged <- ScaleData(CLL_merged, features = all.genes)
```

# Exploring

First step of visualization is to run a PCA.

```{r}
#| warning: false
CLL_merged <- RunPCA(CLL_merged, features = VariableFeatures(object = CLL_merged))
```

Ranking of principle components based on the percentage of variance explained by each one, in order to choose how many components for the representation

```{r}
#| warning: false
ElbowPlot(CLL_merged)
```

With those plots, the correlation between genes and components is shown, the PCA in the two first components and the heatmap in PC1.

```{r}
VizDimLoadings(CLL_merged, dims = 1:2, reduction = "pca")
DimPlot(CLL_merged, reduction = "pca") + NoLegend()
DimHeatmap(CLL_merged, dims = 1, cells = 500, balanced = TRUE)
```

## Clustering

Cells were clustered based on the first ten principal components. The `FindClusters` function requires a `resolution` parameter, which controls the clustering granularity, the number of clusters obtained depends directly on this value. That's why four different resolutions (0.05, 0.1, 0.2, 0.5) were tested, in order to identify the most appropriate one.

```{r}
#| message: false
#| warning: false
CLL_merged <- FindNeighbors(CLL_merged, dims = 1:10)
CLL_merged <- FindClusters(CLL_merged, resolution = params$resolution)
```

## t-SNE

```{r}
CLL_merged <- RunTSNE(CLL_merged, reduction.use = "pca", dims.use = 1:10)
title=paste("t-SNE without the doublets removal,", params$patient)
tsne1<-TSNEPlot(CLL_merged) + ggtitle(str_wrap(title, width = 50)) + theme(plot.title = element_text(size = 10, hjust = 0.5))
tsne1
ggsave(paste0("withdoublets_tsne_", params$patient, ".jpeg"), tsne1)
```

## Bonsai

Bonsai is a data representation tool that can be applied to single-cell datasets. It reconstructs a tree that best captures the structure present in high-dimensional data (Daan Hugo de Groot, Sarah X. Morillo Leonardo, Mikhail Pachkov, Erik van Nimwegen, 2025).

In this analysis, we use the single-cell Bonsai pipeline available at <https://bonsai.unibas.ch/bonsai/>. To use it, we first extract the gene expression count matrix from the Seurat object and save it in a tsv format. This matrix is then submitted through the web interface, and the results are sent via email once the analysis is complete.

Export the count matrix to a tsv file from a Seurat object

```{r}
counts <- GetAssayData(object = CLL_merged, assay = "RNA", slot = "counts")
counts <- as.matrix(counts)
namefile=paste0("CLL_", params$patient, "_withdoublets.tsv")
write.table(counts, file = namefile, sep = "\t", quote = FALSE, col.names = NA)
```

## wnnUMAP (ADT+RNA)

Visualization with wnnUMAP

```{r}
#| message: false
#| warning: false
CLL_merged <-run_adt_umap(CLL_merged)
CLL_merged <- run_wnnumap(CLL_merged, params$resolution, "RNA")
title=paste("wnnUMAP without the doublets removal,", params$patient)
plotwnn <- DimPlot(CLL_merged, reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 2.5) + 
  NoLegend() + ggtitle(str_wrap(title, width = 50)) + theme(plot.title = element_text(size = 10, hjust = 0.5))
plotwnn
ggsave(paste0("withdoublets_wnnumpa_", params$patient, ".jpeg"), plotwnn)
DefaultAssay(CLL_merged) <- 'RNA'
```

## UMAP

Run the UMAP (visualization) on the resolution chosen below.

```{r}
#| warning: false
CLL_merged <- RunUMAP(CLL_merged, dims = 1:10)
title=paste("UMAP without the doublets removal,", params$patient)
DimPlot(CLL_merged, reduction = "umap")
plotumap<-DimPlot(CLL_merged, reduction = "umap") + ggtitle(str_wrap(title, width = 50)) + theme(plot.title = element_text(size = 10, hjust = 0.5))
ggsave(paste0("withdoublets_umap_", params$patient, ".jpeg"), plotumap)
```

## Save the object after the pre-processing

```{r}
namepath=paste0("./CLL_", params$patient, "_doublets.rds")
saveRDS(CLL_merged, file = namepath)
```
