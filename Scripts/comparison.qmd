---
title: "Comparison"
params: 
  patient: "P1"
  file1: "/home/ablanc/work/NetBIO2/Seurat/P1/Annotation_LogNorm/CLL_annotated_Seurat_LogNorm_P1.rds"
  file2: "/home/ablanc/work/NetBIO2/DDQC/P1/Annotation_v2/CLL_annotated_DDQC_P1.rds"
  file3: "/home/ablanc/work/NetBIO2/valiDrops/P1/Annotation_v2/CLL_annotated_valiDrops_P1.rds"
  file4: "/home/ablanc/work/NetBIO2/CellBender/P1/Annotation_v2/CLL_annotated_CellBender_P1.rds"
  file5: "/home/ablanc/work/NetBIO2/WithoutQC/P1/Annotation_v2/CLL_annotated_WithoutQC_P1.rds"
  file6: "/home/ablanc/work/NetBIO2/WithDoublets/P1/Annotation_v2/CLL_annotated_WithDoublets_P1.rds"
  file7: "/home/ablanc/work/NetBIO2/Days_sep/P1/Annotation_v2/CLL_annotated_Days_sep_P1.rds"
  label1: "Seurat"
  label2: "DDQC"
  label3: "valiDrops"
  label4: "CellBender"
  label5: "WithoutQC"
  label6: "WithDoublets"
  label7: "Days_sep"
format: html
editor: visual
---

## Comparison between all the pre-processing types

```{r}
.libPaths("/work/user/ablanc/NetBIO2/renv/library/linux-rhel-8.10/R-4.5/x86_64-pc-linux-gnu")
library(mclust)
library(pheatmap)
library(ggplot2)

## User parameters
# Association between short names and file paths
file_paths <- list(
  A = params$file1,
  B = params$file2,
  C = params$file3,
  D = params$file4,
  E = params$file5,
  F = params$file6,
  G = params$file7
)
# Custom short labels
labels <- c(
  A = params$label1,
  B = params$label2,
  C = params$label3,
  D = params$label4,
  E = params$label5,
  F = params$label6,
  G = params$label7
)

# Load Seurat objects
objs <- lapply(file_paths, readRDS)
names(objs) <- labels
```

```{r}
label_col <- "final_annot"  

## Utility functions
get_annotation <- function(obj, colname) {
  md <- obj@meta.data
  stopifnot(colname %in% colnames(md))
  ann <- md[[colname]]
  names(ann) <- rownames(md)
  return(ann)
}

normalize_barcodes <- function(x) {
  x
}

compare_pair <- function(ann1, ann2) {
  names(ann1) <- normalize_barcodes(names(ann1))
  names(ann2) <- normalize_barcodes(names(ann2))
  common <- intersect(names(ann1), names(ann2))
  n_common <- length(common)
  if (n_common < 2) return(list(ARI=NA_real_, MatchPct=NA_real_, N=n_common))
  
  a1 <- as.factor(ann1[common])
  a2 <- as.factor(ann2[common])
  
  # ARI computation (works with factors)
  ari <- adjustedRandIndex(a1, a2)
  
  # For exact label matching, convert to character
  match_pct <- mean(as.character(a1) == as.character(a2)) * 100
  
  list(ARI=ari, MatchPct=match_pct, N=n_common)
}

## Build matrices 
obj_names <- names(objs)
k <- length(objs)
ari_mat <- matrix(NA_real_, k, k, dimnames = list(obj_names, obj_names))
match_mat <- matrix(NA_real_, k, k, dimnames = list(obj_names, obj_names))
n_mat <- matrix(0L, k, k, dimnames = list(obj_names, obj_names))

ann_list <- lapply(objs, get_annotation, colname = label_col)

for (i in seq_len(k)) {
  for (j in seq_len(k)) {
    if (i == j) {
      ari_mat[i, j] <- 1
      match_mat[i, j] <- 100
      n_mat[i, j] <- length(ann_list[[i]])
    } else if (j > i) {
      res <- compare_pair(ann_list[[i]], ann_list[[j]])
      ari_mat[i, j] <- ari_mat[j, i] <- res$ARI
      match_mat[i, j] <- match_mat[j, i] <- res$MatchPct
      n_mat[i, j] <- n_mat[j, i] <- res$N
    }
  }
}

## Heatmaps 
my_palette <- colorRampPalette(c("light blue","blue"))(100)

title = paste("Annotation similarity (ARI), patient", params$patient)
p1 <- pheatmap(ari_mat, display_numbers = TRUE, number_format = "%.2f",
         main = title, border_color = NA,
         color = my_palette)

ggsave(paste0("trajectory_ARI_", params$patient, ".jpeg"), p1, width = 3000,
  height = 2000, units = "px")

title = paste("% of exact label matching, patient", params$patient)
p1 <- pheatmap(match_mat, display_numbers = TRUE, number_format = "%.1f",
         main = title, border_color = NA,
         color = my_palette)

ggsave(paste0("trajectory_percentage_", params$patient, ".jpeg"), p1, width = 3000,
  height = 2000, units = "px")

title = paste("Number of common cells, patient", params$patient)
pheatmap(n_mat, display_numbers = TRUE, number_format = "%.0f",
         main = title, border_color = NA,
         color = my_palette)
```
