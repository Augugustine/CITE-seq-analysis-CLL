---
title: "Pre-processing DDQC"
params: 
  patient: "P1"
  resolution: 0.1
  mito_gene_percent: 10
  directory: "/home/a.blanc-boekholt/Documents/Singlecell-R"
  file: "filtered_feature_bc_matrix.h5"
format: html
editor: visual
---

Steps of this pre-processing, Seurat, DoubletFinder and DDQC (all days merged)

-   Downloading the data filtered by 10X Genomics pipeline CellRanger and merging all days into one Seurat object.

-   Removing non-coding genes using **Ensembl** gene annotations (via a reusable custom function).

-   Detecting doublets (Singlet or Doublet) using **DoubletFinder** on each day separately, then adding this metadata to the merged object and removing doublets (also done via a reusable function).

-   Quality control using **DDQC**.

-   Selecting the top 2000 variable genes, normalization, and scaling using **Seurat**.

-   Visualizations: PCA, Heatmap, and UMAP (resolution 0.1)

## Data and libraries initialization

```{r}
#| message: false
library(SeuratObject)
library(sp)
library(Seurat)
library(hdf5r)
library(dplyr)
library(patchwork)
#library(scDblFinder)
library(DoubletFinder)
#library(SingleCellExperiment)
library(tibble)
library(biomaRt)
library(ggplot2)
library(ddqcR)
library(SummarizedExperiment)
source("functions.R")
```

```{r}
#| include: false
seurat <- load_data_10XG(params$patient, c(1,4,8,11,14), params$directory, params$file)
list2env(seurat, envir = .GlobalEnv)
```

Add an identity with the time point

```{r}
CLL_D1_filtered$timepoint <- "D1"
CLL_D4_filtered$timepoint <- "D4"
CLL_D8_filtered$timepoint <- "D8"
CLL_D11_filtered$timepoint <- "D11"
CLL_D14_filtered$timepoint <- "D14"
```

Merge all the data filtered, in order to have one SeuratObject with all the time point for one patient (and the total cells and genes number).

```{r}
CLL_merged <- merge(CLL_D1_filtered, y = list(CLL_D4_filtered, CLL_D8_filtered,
                                                    CLL_D11_filtered, CLL_D14_filtered),
                       add.cell.ids = c("D1", "D4", "D8", "D11", "D14"), project = "TimeCourse")

CLL_merged[["RNA"]] <- JoinLayers(CLL_merged[["RNA"]])
```

Total number of cells at the beginning.

```{r}
ncol(CLL_merged)
```

## Non coding genes removal

Features number before non-coding genes removal

```{r}
nrow(CLL_merged)
```

The non-coding genes removal is based on the database Ensembl in order to select the genes coding for proteins. The function used is explain on the file functions.R

This function accepts a Seurat object at any stage (pre- or post-processing) and returns a version of the object with all non-coding genes filtered out.

```{r}
CLL_merged <- removal_noncoding_gene(CLL_merged)
```

Features number after non-coding genes removal

```{r}
nrow(CLL_merged)
```

## Doublet removal

Number of cell before doublet removal

```{r}
ncol(CLL_merged)
```

The tool used is DoubletFinder, and it is important to run it on each sample individually rather than on aggregated data. The input for this step is a Seurat object corresponding to one sample (i.e., one patient at one time point). In this case, we use the custom function `complete_DoubletFinder` defined in the `functions.R` file. This function performs all necessary preprocessing steps prior to running DoubletFinder. The output is a new Seurat object that includes an additional metadata column indicating whether each cell is classified as a singlet or a doublet. For each day, the cell IDs and their corresponding classifications are extracted and then merged across all days.

```{r}
#| message: false
#| warning: false
#| include: false
days <- c("D1","D4","D8","D11", "D14")
results_list <- list()

for (day in days) {
  obj_name <- paste0("CLL_", day, "_filtered")
  obj <- get(obj_name)
  obj <- complete_DoubletFinder(obj)
  assign(obj_name, obj) 
  
  # Metadata extraction
  res <- obj@meta.data["doublet_finder"]
  
  # New cells name with _D
  res$cell_id <- paste0(day, "_", rownames(res))
  rownames(res) <- res$cell_id
  res$cell_id <- NULL
  
  results_list[[day]] <- res
}

# Fusion
results_multiplet <- do.call(dplyr::bind_rows, results_list)
```

Doublet/Singlet class addition in the Seurat Object metadata and removal doublet

```{r}
CLL_merged <- AddMetaData(CLL_merged, results_multiplet)
CLL_merged <- subset(CLL_merged, doublet_finder == 'Singlet')
```

Cell number after doublets removal

```{r}
ncol(CLL_merged)
```

## QC and filtering

This step in done on the data days merged (same threshold for the 5 time points). The tool DDQC is a tool used for the quality control in single cell RNA seq. It identifies and filters the bad quality cells thanks to adaptive threshold based on the median absolute deviation on four QC metrics (gene and UMI complexity, fraction of reads mapping to mitochondrial and ribosomal genes) on clusters. (Subramanian, A., Alperovich, M., Yang, Y. *et al.*, 2022). Per default, without the fraction of reads mapping to ribosomal genes.

Mitochondrial and ribosomal genes percentage

```{r}
CLL_merged[["percent.mt"]] <- PercentageFeatureSet(CLL_merged, pattern = "^MT-")
CLL_merged[["percent.ribo"]] <- PercentageFeatureSet(CLL_merged, pattern = "^RPS|^RPL")
```

```{r}
ddqc_results<- ddqc.metrics(CLL_merged, res= 0.1)
```

Metadata extraction and adding to the Seurat Object

```{r}
ddqc_metadata <- as.data.frame(colData(ddqc_results)[, c("passed.qc")])
CLL_merged <- AddMetaData(CLL_merged, metadata = ddqc_metadata)
```

Filtering

```{r}
CLL_merged <- subset(CLL_merged, subset = passed.qc==TRUE)
```

Cell and features number after filtering

```{r}
ncol(CLL_merged)
nrow(CLL_merged)
```

## Normalization, scaling and most variable features

Normalization

```{r}
#| include: false
CLL_merged<-NormalizeData(CLL_merged)
```

Variable features. Only genes with variability are kept.

```{r}
#| warning: false
CLL_merged<-FindVariableFeatures(CLL_merged,selection.method = "vst", 
                                    nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(CLL_merged), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(CLL_merged)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
```

Scaling

```{r}
#| warning: false
all.genes <- rownames(CLL_merged)
CLL_merged <- ScaleData(CLL_merged, features = all.genes)
```

# Exploring

First step of visualization is to run a PCA.

```{r}
#| warning: false
CLL_merged <- RunPCA(CLL_merged, features = VariableFeatures(object = CLL_merged))
```

Ranking of principle components based on the percentage of variance explained by each one, in order to choose how many components for the representation

```{r}
#| warning: false
ElbowPlot(CLL_merged)
```

With those plots, the correlation between genes and components is shown, the PCA in the two first components and the heatmap in PC1.

```{r}
VizDimLoadings(CLL_merged, dims = 1:2, reduction = "pca")
DimPlot(CLL_merged, reduction = "pca") + NoLegend()
DimHeatmap(CLL_merged, dims = 1, cells = 500, balanced = TRUE)
```

## Clustering

Cells were clustered based on the first ten principal components. The `FindClusters` function requires a `resolution` parameter, which controls the clustering granularity, the number of clusters obtained depends directly on this value. That's why four different resolutions (0.05, 0.1, 0.2, 0.5) were tested, in order to identify the most appropriate one.

```{r}
#| message: false
#| warning: false
CLL_merged <- FindNeighbors(CLL_merged, dims = 1:10)
CLL_merged <- FindClusters(CLL_merged, resolution = params$resolution)
```

## UMAP

Run the UMAP (visualization) on the resolution chosen below.

```{r}
#| warning: false
CLL_merged <- RunUMAP(CLL_merged, dims = 1:10)
DimPlot(CLL_merged, reduction = "umap")
plotumap<-DimPlot(CLL_merged, reduction = "umap")
ggsave("umap.jpeg", plotumap)
```

Save the object after the pre-processing

```{r}
namepath=paste0("./CLL_", params$patient, "_merged.rds")
#saveRDS(CLL_merged, file = namepath)
```
