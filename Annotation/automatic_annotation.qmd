---
title: "Annotation"
params: 
  patient: "P1"
  file: "CLL_P1_seurat_reduit.rds"
  type: "Seurat"
format: html
editor: visual
---

```{r}
#| message: false
library(SeuratObject)
library(sp)
library(Seurat)
library(hdf5r)
library(dplyr)
library(patchwork)
library(ggplot2)
library(SingleR)
library(celldex)
library(stringr)
library(Azimuth)
library(SeuratData)
library(SeuratDisk)
library(pheatmap)
library(viridis)
library(gridExtra)
source("functions.R")
```

```{r}
data<-readRDS(params$file)
```

### SingleR

Get reference dataset and the count matrix

```{r}
ref <- celldex::HumanPrimaryCellAtlasData()
norm_counts <- LayerData(data, assay = "RNA", layer = 'data')
```

Subset to include only relevant cell types

```{r}
ref <- ref[,grepl('DC|B_cell|Neutrophils|T_cells|Monocyte|Erythroblast|Macrophage|NK_cell|Platelets|Myelocyte', ref$label.main, ignore.case = TRUE)]
#unique(ref$label.main)
```

```{r}
annotation<-SingleR(test = norm_counts,
                  ref = ref, 
                  labels = ref$label.main,
                  de.method = 'wilcox')
```

Add to seurat object

```{r}
data_annotated <- AddMetaData(data, annotation$pruned.labels, col.name = 'SingleR')
```

## Visualization

UMAP

```{r}
title=paste("UMAP annotated by SingleR, pre-processing type :", params$type, ", patient", params$patient)
plotumap<-DimPlot(data_annotated, group.by="SingleR", reduction = "umap", label = TRUE, repel = TRUE, label.size = 4) + ggtitle(str_wrap(title, width = 100)) + theme(plot.title = element_text(size = 15, hjust = 0.5), legend.text = element_text(size = 12))
plotumap
ggsave(paste0(params$type,"_umap_SingleR_", params$patient, ".jpeg"), plotumap, width = 3000,
  height = 2000, units = "px")
```

wnnUMAP

```{r}
#| message: false
#| warning: false
data_annotated <-run_adt_umap(data_annotated)
title=paste("wnnUMAP annotated by SingleR, pre-processing type :", params$type, ", patient", params$patient)
plotwnn <- DimPlot(data_annotated, group.by="SingleR", reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 4) + ggtitle(str_wrap(title, width = 100)) + theme(plot.title = element_text(size = 15, hjust = 0.5), legend.text = element_text(size = ))
plotwnn
ggsave(paste0(params$type,"_wnnumap_SingleR_", params$patient, ".jpeg"), plotwnn, width = 3000,
  height = 2000, units = "px")
DefaultAssay(data_annotated) <- 'RNA'
```

t-SNE

```{r}
title=paste("t-SNE annotated by SingleR, pre-processing type :", params$type, ", patient", params$patient)
plot1<-DimPlot(data_annotated, group.by="SingleR", reduction = 'tsne', label = TRUE, repel = TRUE, label.size = 4) + ggtitle(str_wrap(title, width = 100)) + theme(plot.title = element_text(size =15, hjust = 0.5), legend.text = element_text(size = 12))
plot1
ggsave(paste0(params$type,"_tsne_SingleR_", params$patient, ".jpeg"), plot1, width = 3000,
  height = 2000, units = "px")
```

Bonsai

In this analysis, we use the single-cell Bonsai pipeline available at <https://bonsai.unibas.ch/bonsai/>. The TSV matrix is exported in the pre-processing script, and we supplemented it with an annotation TSV file containing cell barcodes and their corresponding cell type annotations.

```{r}
annotations <- data_annotated$SingleR
df <- data.frame(
  cell_ID = rownames(annotation),
  celltype = annotation$pruned.labels
)

namefile=paste0("singler_annotation_", params$type, "_", params$patient, ".tsv")
write.table(df, file = namefile, sep = "\t", row.names = FALSE, quote = FALSE)
```

### Azimuth

Retrieve the Seurat object (containing both RNA and ADT data), but perform cell type annotation using only the RNA modality. The object must already be filtered (cells and genes), and must contain raw RNA counts, as Azimuth will apply its own normalization consistent with the reference dataset used (Hao et al., 2021).

Create an Azimuth reference using the ?? dataset.

The dataset is in h5ad format, so transformation in h5 for Seurat. (website : ??)

```{r}
#Convert("tabula_sapiens_immune.h5ad", dest = "h5seurat", overwrite = TRUE)
#ref_tabula <- LoadH5Seurat("tabula_sapiens_immune.h5seurat")
```

```{r}
#ref_tabula <- SCTransform(ref_tabula)
#ref_tabula <- RunPCA(ref_tabula)
#ref_tabula <- RunUMAP(ref_tabula, dims = 1:50, return.model = TRUE )

# Add labels
#ref_tabula$celltype <- bp$label.fine

# Azimuth ref
#azimuth_ref <- AzimuthReference(ref_tabula, refDR="pca",refUMAP = "umap", refAssay="SCT", metadata = "celltype")
```

```{r}
#| include: false
#InstallData("pbmcref")
data_annotated <- RunAzimuth(data_annotated, reference = "pbmcref")
```

## Visualization

UMAP

```{r}
title=paste("UMAP annotated by Azimuth, pre-processing type :", params$type, ", patient", params$patient)
plotumap<-DimPlot(data_annotated, group.by = "predicted.celltype.l1", reduction = "umap", label = TRUE, repel = TRUE, label.size = 4) + ggtitle(str_wrap(title, width = 100)) + theme(plot.title = element_text(size = 15, hjust = 0.5), legend.text = element_text(size = 12))
plotumap
ggsave(paste0(params$type,"_umap_Azimuth_", params$patient, ".jpeg"), plotumap, width = 3000,
  height = 2000, units = "px")
```

```{r}
title=paste("UMAP annotated by Azimuth, pre-processing type :", params$type, ", patient", params$patient)
plotumap<-DimPlot(data_annotated, group.by = "predicted.celltype.l2", reduction = "umap", label = TRUE, repel = TRUE, label.size = 4) + ggtitle(str_wrap(title, width = 100)) + theme(plot.title = element_text(size = 15, hjust = 0.5), legend.text = element_text(size = 12))
plotumap
ggsave(paste0(params$type,"_umap_Azimuth_l2_", params$patient, ".jpeg"), plotumap, width = 3000,
  height = 2000, units = "px")
```

wnnUMAP

```{r}
#| message: false
#| warning: false
data_annotated <-run_adt_umap(data_annotated)
title=paste("wnnUMAP annotated by Azimuth, pre-processing type :", params$type, ", patient", params$patient)
plotwnn <- DimPlot(data_annotated, group.by = "predicted.celltype.l1", reduction = 'wnn.umap', label = TRUE, repel = TRUE, label.size = 4) + 
  NoLegend() + ggtitle(str_wrap(title, width = 100)) + theme(plot.title = element_text(size = 15, hjust = 0.5), legend.text = element_text(size = 12))
plotwnn
ggsave(paste0(params$type,"_wnnumap_Azimuth_", params$patient, ".jpeg"), plotwnn, width = 3000,
  height = 2000, units = "px")
DefaultAssay(data_annotated) <- 'RNA'
```

t-SNE

```{r}
title=paste("t-SNE annotated by Azimuth, pre-processing type :", params$type, ", patient", params$patient)
plot1<-DimPlot(data_annotated, group.by="predicted.celltype.l1", reduction = 'tsne', label = TRUE, repel = TRUE, label.size = 4) + ggtitle(str_wrap(title, width = 100)) + theme(plot.title = element_text(size = 15, hjust = 0.5), legend.text = element_text(size = 12))
plot1
ggsave(paste0(params$type,"_tsne_Azimuth_", params$patient, ".jpeg"), plot1, width = 3000,
  height = 2000, units = "px")
```

Bonsai

In this analysis, we use the single-cell Bonsai pipeline available at <https://bonsai.unibas.ch/bonsai/>. The TSV matrix is exported in the pre-processing script, and we supplemented it with an annotation TSV file containing cell barcodes and their corresponding cell type annotations.

```{r}
barcodes <- colnames(data_annotated)
annotations <- data_annotated$predicted.celltype.l1

df <- data.frame(
  barcode = barcodes,
  predicted_celltype = annotations
)
namefile=paste0("azimuth_annotation_", params$type, "_", params$patient, ".tsv")
write.table(df, file = namefile, sep = "\t", row.names = FALSE, quote = FALSE)
```

## Heatmap to compare automatic annotation

```{r}
tab <- table(Cluster = Idents(data_annotated), CellType = data_annotated$SingleR)
tab_log <- log1p(tab)

# Heatmap
p1<-pheatmap(
  tab_log,
  cluster_rows = TRUE, 
  cluster_cols = TRUE, 
  color = viridis::viridis(50), 
  border_color = NA,
  main = "Clusters vs Cell Types (SingleR)"
)

tab <- table(Cluster = Idents(data_annotated), CellType = data_annotated$predicted.celltype.l1)
tab_log <- log1p(tab)

# Heatmap
p2<-pheatmap(
  tab_log,
  cluster_rows = TRUE,
  cluster_cols = TRUE,
  color = viridis::viridis(50),
  border_color = NA,
  main = "Clusters vs Cell Types (Azimuth)"
)
```

## Save the annotation file

```{r}
namepath=paste0("CLL_auto_annotated_", params$type, "_", params$patient, ".rds")
saveRDS(data_annotated, file = namepath)
```

## 
