---
title: "GRN"
params: 
  patient: "P1"
  file: "Matrix/CLL_annotated_Seurat_LogNorm_P1.rds"
format: html
editor: visual
---

## Data and libraries initialization

```{r}
#| message: false
library(SeuratObject)
library(SeuratDisk)
library(sp)
library(Seurat)
library(hdf5r)
library(dplyr)
library(patchwork)
library(ggplot2)
library(stringr)
library(pheatmap)
library(viridis)
library(gridExtra)
library(SeuratExtend)
library(AUCell)
source("functions.R")
```

Read the data pre-processed

```{r}
data<-readRDS(params$file)
Idents(data) <- data$final_annot
#data<-subset(data, subset = (final_annot %in% c("B","B intermediate","B memory","B naive","Macrophage")))
```

```{r}
SaveLoom(data, filename="TimeCourse.loom")
```

### Apply pySCENIC in the Genotoul cluster with the script "pySCENIC.sh"

Import pySCENIC output

```{r}
# AUC score dataframe
auc_mtx <- read.csv("Matrix/step_3_aucell.csv", row.names = 1, check.names=FALSE)
auc_mtx <- t(auc_mtx)
auc_mtx <- as.data.frame(auc_mtx)
rownames(auc_mtx) <- gsub("[(+)]", "", rownames(auc_mtx))
auc_mtx[] <- lapply(auc_mtx, as.numeric)
auc_mtx <- as.matrix(auc_mtx)

# TF and targets
regulons <- read.csv("Matrix/step_2_reg.csv")

# Loom output in seurat object
scenic_output<-"/home/a.blanc-boekholt/Documents/Singlecell-R/Scripts/Matrix/out_TimeCourse.loom"
data <- ImportPyscenicLoom(scenic_output, seu = data)
```

Heatmap

```{r}
groups <- data@meta.data[["final_annot"]]
identical(colnames(auc_mtx), colnames(data))
annotation_df <- data.frame(Cell_types = data@meta.data[["final_annot"]])
rownames(annotation_df) <- colnames(auc_mtx)

# Keep the most variable TFs
var_auc <- apply(auc_mtx, 1, var)
top_var_regulons <- names(sort(var_auc, decreasing = TRUE))[1:20]
auc_mat_top <- auc_mtx[top_var_regulons, ]

my_colors <- list(
  Cell_types = c(B = "darkgreen","B intermediate" = "darkgreen","B memory" = "darkgreen","B naive" = "darkgreen", "CD4 T" = "lightblue", "CD8 T" = "lightblue", "T" = "lightblue", "Macrophage"= "red","Monocyte"="orange", "Neutrophil"="brown", "NK"="darkblue", "Erythroblast"="grey" )
)

# Scaled matrix 
auc_mat_scaled <- t(scale(t(auc_mat_top)))

# Heatmap
pheatmap(
  auc_mat_top,
  cluster_cols = TRUE,
  cluster_rows = TRUE,
  show_colnames = FALSE,
  color = colorRampPalette(c("blue", "white", "red"))(100),
  annotation_col = annotation_df, 
  annotation_colors = my_colors)

```

```{r}
tf_auc <- read.csv("Matrix/step_3_aucell.csv", row.names = 1, check.names=FALSE)
colnames(tf_auc) <- gsub("[(+)]", "", colnames(tf_auc))
celltypes<-data@meta.data[["final_annot"]]
celltypes<-ifelse(celltypes=="B intermediate"|celltypes=="B naive"|celltypes=="B memory","B cells", celltypes)
tf_zscore <- CalcStats(tf_auc, f = celltypes, order = "p", n = 4, t = TRUE) # change the n (n*cluster=TF number)
plot<-Heatmap(tf_zscore, lab_fill = "zscore")
plot
ggsave(paste0("heatmap_tf", params$patient, ".jpeg"), plot, width = 3000, height = 2000, units = "px")
```

Waterfall plot (CLL-macro vs B, CLL-macro vs macro)

```{r}
plot<-WaterfallPlot(t(tf_auc), f = celltypes,
  ident.1 = "B cells",      # First group of cells
  ident.2 = "Macrophage",     # Second group of cells
  exp.transform = FALSE,      # Disable transformation of expression data
  top.n = 20,                  # Display the top 20 most differentially active TFs
  length="logFC", 
  log.base="2", 
  color="p"
)
plot
ggsave(paste0("waterfallplot_macroxbridge", params$patient, ".jpeg"), plot, width = 3000, height = 2000, units = "px")
```

Binaryzation

```{r}

```

Differential regulons analysis

```{r}
data[['AUC']] <- CreateAssayObject(data = auc_mtx)
DefaultAssay(data) <- 'AUC'
```

```{r}
celltypes <- unique(data$final_annot)

deg.ls <- lapply(celltypes, function(ct) {
  deg <- FindMarkers(
    data,
    ident.1 = ct,
    ident.2 = NULL,           # contre toutes les autres cellules
    logfc.threshold = 0.05,
    min.pct = 0.1
  )
  deg$avg_logFC <- as.numeric(deg$avg_logFC)
  deg.up <- deg[which(deg$avg_logFC > 0), ]
  deg.dn <- deg[which(deg$avg_logFC < 0), ]
  deg <- list(deg.up, deg.dn)
  return(deg)
})

names(deg.ls) <- celltypes
top_regulons <- unique(unlist(lapply(deg.ls, function(x) rownames(head(x, 10)))))
length(top_regulons)
```
